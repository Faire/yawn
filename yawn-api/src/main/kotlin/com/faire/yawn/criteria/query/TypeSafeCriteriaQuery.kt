package com.faire.yawn.criteria.query

import com.faire.yawn.YawnTableDef
import com.faire.yawn.query.YawnQuery

/**
 * A type-safe wrapper for Yawn queries DSL without projections.
 *
 * This is equivalent to [com.faire.persistence.TypedCriteria], but it is type-safe.
 * So for example, instead of:
 *
 *     fun addEq(name: String, value: Any)
 *
 * Yawn exposes:
 *
 *     fun <F> addEq(column: YawnTableDef<*>.ColumnDef<F>, value: F)
 *
 * Where the ColumnDef's are automatically generated by the Yawn using KSP.
 *
 * @param SOURCE the type of the entity being queried.
 * @param DEF the table definition of the entity being queried.
 */
class TypeSafeCriteriaQuery<SOURCE : Any, DEF : YawnTableDef<SOURCE, SOURCE>> private constructor(
    query: YawnQuery<SOURCE, SOURCE>,
) : BaseTypeSafeCriteriaQuery<SOURCE, SOURCE, DEF>(query),
    TypeSafeCriteriaWithWhere<SOURCE, SOURCE> by TypeSafeCriteriaWithWhereDelegate(query),
    TypeSafeCriteriaWithJoin<SOURCE, SOURCE> by TypeSafeCriteriaWithJoinDelegate(query),
    TypeSafeCriteriaWithOrder<SOURCE, SOURCE> by TypeSafeCriteriaWithOrderDelegate(query) {
  companion object {
    internal fun <T : Any, DEF : YawnTableDef<T, T>> applyLambda(
        query: YawnQuery<T, T>,
        lambda: TypeSafeCriteriaQuery<T, DEF>.() -> Unit,
    ): TypeSafeCriteriaQuery<T, DEF> {
      return TypeSafeCriteriaQuery<T, DEF>(query).apply(lambda)
    }
  }
}
