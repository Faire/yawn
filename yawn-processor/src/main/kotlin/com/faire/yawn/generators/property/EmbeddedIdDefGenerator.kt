package com.faire.yawn.generators.property

import com.faire.yawn.YawnTableDef
import com.faire.yawn.util.ForeignKeyReference
import com.faire.yawn.util.YawnContext
import com.faire.yawn.util.YawnNamesGenerator.generateEmbeddedDefClassName
import com.google.devtools.ksp.symbol.KSType
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.ksp.toClassName

/**
 * Leverages the [YawnTableDef.EmbeddedDef] child generated by
 * [com.faire.yawn.generators.type.EmbeddedIdTypeGenerator] to create a field reference
 * for the embedded id primary key.
 *
 * For example, given the following column:
 *
 * ```
 *  @EmbeddedId
 *  override lateinit var cid: FooCompositeId
 * ```
 *
 * It will look something like:
 *
 * ```
 *  val cid: FooCompositeIdDef = FooCompositeIdDef()
 * ```
 *
 * This assumes that `FooCompositeIdDef` has been generated by the processor.
 * Note that `FooCompositeIdDef` extends [YawnTableDef.EmbeddedDef].
 */
internal object EmbeddedIdDefGenerator : YawnPropertyGenerator() {
  override val generatedType = YawnTableDef.EmbeddedDef::class

  override fun generate(
      yawnContext: YawnContext,
      fieldName: String, // in this example, `cid`
      fieldType: KSType, // in this example, `FooCompositeId`
      foreignKeyRef: ForeignKeyReference?, // always null
  ): PropertySpec {
    check(foreignKeyRef == null)

    // in this example, `FooCompositeIdDef`
    val typeName = yawnContext.newClassName
        .nestedClass(generateEmbeddedDefClassName(fieldType.toClassName()))

    // val cid: FooCompositeIdDef = FooCompositeIdDef()
    return PropertySpec.builder(fieldName, typeName)
        .initializer("%T()", typeName)
        .build()
  }
}
